
// ==========================================================================
//  GPLEX error listing for lex source file <Lexer.l>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  DESKTOP-UBEVP6I
//  DateTime: 12/23/2019 4:28:58 PM
//  UserName: JovanJuriÄ‡
// ==========================================================================


%option out:Generated/Lexer.cs
%namespace Syntax
%using QUT.Gppg;

alpha   [a-zA-Z_]
digit   [0-9]
alphanum    {alpha}|{digit}
%%

" "|\r|\n       { }
//.*$           { }

"let"           { return (int) Tokens.LET; }
"in"            { return (int) Tokens.IN; }
"\\"            { return (int) Tokens.LAMBDA; }
"."             { return (int) Tokens.DOT; }
","             { return (int) Tokens.COMMA; }
// Warning: This pattern always overrides "","" 
// ---------------------------------------------
";"             { return (int) Tokens.SEMI; }
"+"             { return (int) Tokens.PLUS; }
"-"             { return (int) Tokens.SUB; }
"*"             { return (int) Tokens.MUL; }
"/"             { return (int) Tokens.DIV; }
"="             { return (int) Tokens.ASN; }
"=="            { return (int) Tokens.EQ; }
"!="            { return (int) Tokens.NEQ; }
">"             { return (int) Tokens.LESSER; }
"<"             { return (int) Tokens.GREATER; }
">="            { return (int) Tokens.GE; }
"<="            { return (int) Tokens.LE; }
"||"            { return (int) Tokens.OR; }
"&&"            { return (int) Tokens.AND; }
"("             { return (int) Tokens.LPAR; }
")"             { return (int) Tokens.RPAR; }
"["             { return (int) Tokens.LSQR; }
"]"             { return (int) Tokens.RSQR; }
"{"             { return (int) Tokens.LCUR; }
"}"             { return (int) Tokens.RCUR; }
","             { return (int) Tokens.COMMA; }
// Warning: This pattern always overridden by "","" 
// -------------------------------------------------
"if"			{ return (int) Tokens.IF; }
"else"			{ return (int) Tokens.ELSE; }
"while"			{ return (int) Tokens.WHILE; }
"return"		{ return (int) Tokens.RETURN; }
"void"			{ return (int) Tokens.VOID; }
"true"			{ return (int) Tokens.TRUE; }
"false"			{ return (int) Tokens.FALSE; }
"int"			{ return (int) Tokens.INT; }
"bool"			{ return (int) Tokens.BOOL; }



{alpha}{alphanum}*      { yylval.value = yytext;
                          return (int) Tokens.ID; 
                        }
                        
{digit}+                { yylval.value = yytext;
                          return (int) Tokens.NUM; 
                        }
.                       { yylval.value = yytext;
                          return (int) Tokens.ERR;
                        }
                        
%{
      yylloc = new LexLocation(tokLin, tokCol, tokELin, tokECol);
%}

%% 

override public void yyerror(string msg, object[] arg) {
  Console.WriteLine("{0} on line {1} column {2}", msg, yylloc.StartLine, yylloc.StartColumn);
}// ==========================================================================

